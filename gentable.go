// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"log"
	"os"
)

var source = `// Code generated by gentable.go. DO NOT EDIT.
package downscale
var divTable = [65536]uint32{
	{{range $i, $v := .N}}{{printf "%s\n" $v}}{{end}}}
`

func main() {
	t := template.Must(template.New("").Parse(source))

	n := make([]string, 65536)
	for i := 0; i < 256; i++ {
		n[i<<8] = fmt.Sprintf("0, // %d * 255 / 0", i)
		for j := 1; j < 256; j++ {
			n[(i<<8)+j] = fmt.Sprintf("%d, // %d * 255 / %d", i*255/j, i, j)
		}
	}

	b := bytes.NewBufferString("")
	if err := t.Execute(b, map[string]interface{}{
		"N": n,
	}); err != nil {
		log.Fatal(err)
	}
	buf, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	f, err := os.Create("zdivtable.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	if _, err = f.Write(buf); err != nil {
		log.Fatal(err)
	}
}
